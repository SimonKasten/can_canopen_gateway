import canopen
from canopen.profiles.p402 import BaseNode402
import time
import listHTML

import sys, os
pathname = os.path.dirname(sys.argv[0])        

# for pyinstaller
import can.interfaces.pcan
import can.interfaces.vector

class Bus:
    def __init__(self):
        self.servo1_active = False
        self.servo2_active = False

    def initialize(self, can_dev, busnum, node_1, node_2, node_3): 
        self.net = canopen.Network()
        self.servo1 = BaseNode402(node_1, pathname + '/eds/CDHD_drive.eds')
        self.servo2 = BaseNode402(node_2, pathname + '/eds/CDHD_drive.eds')
        self.elrest3 = canopen.RemoteNode(node_3, pathname + '/eds/CS1xx_V1_5.eds')

        self.servo1_list = listHTML.createList(self.servo1)
        self.servo2_list = listHTML.createList(self.servo2)
        #self.elrest3_list = listHTML.createList(self.elrest3)

        self.servo1.motorParameter = {
            "name"    : "M1",
            "M_cur_P_gain"  : 1,
            "M_cur_I_gain"  : 1,
            "M_vel_P_gain"  : 3,
            "M_vel_I_gain"   : 60,
            "M_pos_P_gain"  : 1,
            "M_pos_I_gain"  : 60,
            "M_pos_D_gain"  : 1,
            "M_pos_saturation"  : 1,
            "M_L"  : 21.0,
            "M_R"  : 1.05,
            "M_peak_I"  : 3850,
            "M_rated_I"  : 2150,
            "M_max_I"  : 1000,
            "M_rated_torque"  : 1450,
            "M_torque_slope"  : 10000,
            "M_max_speed"  : 6000,
            "M_max_profile_speed"  : 6000,
            "M_max_acc"  : 5000,
            "M_max_dec"  : 5000,
            "M_max_profile_acc"  : 3000,
            "M_max_profile_dec"  : 3000
        }    
        self.servo2.motorParameter = {
            "name"    : "M2",
            "M_cur_P_gain"  : 1,
            "M_cur_I_gain"  : 1,
            "M_vel_P_gain"  : 3,
            "M_vel_I_gain"   : 60,
            "M_pos_P_gain"  : 1,
            "M_pos_I_gain"  : 60,
            "M_pos_D_gain"  : 1,
            "M_pos_saturation"  : 1,
            "M_L"  : 21.0,
            "M_R"  : 1.05,
            "M_peak_I"  : 3850,
            "M_rated_I"  : 2150,
            "M_max_I"  : 1000,
            "M_rated_torque"  : 1450,
            "M_torque_slope"  : 10000,
            "M_max_speed"  : 6000,
            "M_max_profile_speed"  : 6000,
            "M_max_acc"  : 5000,
            "M_max_dec"  : 5000,
            "M_max_profile_acc"  : 3000,
            "M_max_profile_dec"  : 3000
        }    

        if can_dev == 'PCAN':
            self.net.connect(bustype='nixnet', channel='CAN3', bitrate=500000)
            # self.net.connect(bustype='pcan', channel=busnum, bitrate=500000)
        elif can_dev == 'CANCase':
            self.net.connect(bustype='vector', app_name='CANalyzer', channel=int(busnum), bitrate=500000)
            
        # Add some nodes with corresponding Object Dictionaries
        self.net.add_node(self.servo1)
        self.net.add_node(self.servo2)
        self.net.add_node(self.elrest3)
        
    def heartbeat(self, time):
        self.net.sync.start(time)   

    def no_heartbeat(self, time):
        self.net.sync.stop()
