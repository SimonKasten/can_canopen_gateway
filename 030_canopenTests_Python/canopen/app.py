
# pyinstaller --onefile --clean app.py
from http.server import HTTPServer, BaseHTTPRequestHandler
from bus import Bus

import sys, os
pathname = os.path.dirname(sys.argv[0])  

import nodes
import json
import time


if __name__ == '__main__':
    try:
        print("Starting Python CANopen Example")
        canbus = Bus()

        class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
            def sendHTMLHeader(self, typ):
                self.send_response(200)
                self.send_header("Content-type", typ)
                self.end_headers()

            def serveFile(self, path, typ):
                self.sendHTMLHeader(typ)
                f = open(pathname + path) 
                self.wfile.write(f.read().encode(encoding='utf_8'))
                f.close()

            def do_GET(self):
                if self.path == '/list':
                    self.sendHTMLHeader('text/html')
                    self.wfile.write(canbus.servo1_list.encode(encoding='utf_8'))
                elif self.path == '/l2ist':
                    self.sendHTMLHeader('text/html')
                    self.wfile.write(canbus.servo2_list.encode(encoding='utf_8'))      

                elif self.path == '/easy': 
                    self.serveFile('/src/easy.html','text/html')
                elif self.path == '/motpar': 
                    self.serveFile('/src/motpar.html','text/html')
                elif self.path == '/script_list.js':    
                    self.serveFile('/src/script_list.js','text/javascript')
                elif self.path == '/script_easy.js': 
                    self.serveFile('/src/script_easy.js','text/javascript')
                elif self.path == '/script_motpar.js': 
                    self.serveFile('/src/script_motpar.js','text/javascript')
                elif self.path == '/script_index.js': 
                    self.serveFile('/src/script_index.js','text/javascript')

                elif self.path == '/bootstrap.min.css':   
                    self.serveFile('/src/bootstrap/css/bootstrap.min.css','text/css')
                elif self.path == '/bootstrap.min.css.map':    
                    self.serveFile('/src/bootstrap/css/bootstrap.min.css.map','text/css')
                elif self.path == '/bootstrap.bundle.min.js':  
                    self.serveFile('/src/bootstrap/js/bootstrap.bundle.min.js','text/javascript')
                elif self.path == '/bootstrap.bundle.min.js.map': 
                    self.serveFile('/src/bootstrap/js/bootstrap.bundle.min.js.map','text/javascript')
                elif self.path == '/jquery.min.js': 
                    self.serveFile('/src/bootstrap/js/jquery.min.js','text/javascript')

                elif self.path == '/favicon.ico':
                    self.send_response(404)
                    self.end_headers()
                else:
                    self.serveFile('/src/index.html','text/html')


            def do_POST(self):          
                res = {
                    "cob": 0,
                    "sub": 0,
                    "action": "",
                    "val": 0.0,
                    "success": 0,
                    "errorMsg": ""
                }
                
                try :    
                    if 'monitor' in self.path :     
                        if canbus.servo1_active :
                            res = nodes.monitor(canbus.servo1)
                        else :
                            res["success"] = -1
                    elif 'moni2tor' in self.path :  
                        if canbus.servo2_active :
                            res = nodes.monitor(canbus.servo2)
                        else :
                            res["success"] = -1

                    elif 'sendCOB' in self.path :    
                        pairs = self.path.split('&')
                        cob = int(pairs[0].split('=')[1])
                        sub = int(pairs[1].split('=')[1])
                        val = float(pairs[2].split('=')[1])
                        nodeID = int(pairs[3].split('=')[1])

                        res["cob"] = cob
                        res["sub"] = sub
                        res["action"] = "send"
                        res["val"] = val
                        if sub > 0 :
                            if nodeID == 1:
                                canbus.servo1.sdo[ cob ][ sub ].raw = val
                            elif nodeID == 2:
                                canbus.servo2.sdo[ cob ][ sub ].raw = val

                        else :
                            if nodeID == 1:
                                canbus.servo1.sdo[ cob ].raw = val
                            elif nodeID == 2:
                                canbus.servo2.sdo[ cob ].raw = val
                        res["success"] = 1

                    elif 'readCOB' in self.path :    
                        pairs = self.path.split('&')
                        cob = int(pairs[0].split('=')[1])
                        sub = int(pairs[1].split('=')[1])
                        nodeID = int(pairs[2].split('=')[1])

                        res["cob"] = cob
                        res["sub"] = sub
                        res["action"] = "read"
                        if sub > 0 :
                            if nodeID == 1:
                                res["val"] = canbus.servo1.sdo[ cob ][ sub ].raw
                            elif nodeID == 2:
                                res["val"] = canbus.servo2.sdo[ cob ][ sub ].raw
                        else :
                            if nodeID == 1:
                                res["val"] = canbus.servo1.sdo[ cob ].raw
                            elif nodeID == 2:
                                res["val"] = canbus.servo2.sdo[ cob ].raw

                        res["success"] = 1



                    elif 'befehl=init_402' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.init_402(canbus.servo1)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.init_402(canbus.servo2)


                    elif 'befehl=PDO_Init' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.PDO_Init(canbus.servo1)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.PDO_Init(canbus.servo2)

                    elif 'befehl=init_301' in self.path :
                        res["success"], res["errorMsg"] = nodes.init_301(canbus.elrest3)

                    elif 'befehl=Elrest_Init' in self.path :
                        res["success"], res["errorMsg"] = nodes.Elrest_Init(canbus.elrest3)

                    elif 'befehl=relais' in self.path :
                        res["success"], res["errorMsg"] = nodes.powerON(canbus.elrest3)


                    elif 'befehl=startOP' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.startOP(canbus.servo1)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.startOP(canbus.servo2)

                    elif 'befehl=stopOP' in self.path :            
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.stopOP(canbus.servo1)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.stopOP(canbus.servo2)



                    elif 'befehl=startDreh' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        soll_dreh = int(pairs[3].split('=')[1])
                        max_torq = float(pairs[4].split('=')[1])
                        
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.startDreh(canbus.servo1, soll_dreh, max_torq)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.startDreh(canbus.servo2, soll_dreh, max_torq)


                    elif 'befehl=startTorq' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        soll_torq = float(pairs[3].split('=')[1])
                        max_dreh = int(pairs[4].split('=')[1])
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.startTorq(canbus.servo1, soll_torq, max_dreh)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.startTorq(canbus.servo2, soll_torq, max_dreh)


                    elif 'befehl=startPos' in self.path :
                        pairs = self.path.split('&')
                        nodeID = int(pairs[1].split('=')[1])
                        soll_pos = float(pairs[3].split('=')[1])
                        max_rpm = int(pairs[4].split('=')[1])
                        max_acc = int(pairs[5].split('=')[1])
                        max_dec = int(pairs[6].split('=')[1])
                        rel_abs = int(pairs[7].split('=')[1])
                        
                        if nodeID == 1:
                            res["success"], res["errorMsg"] = nodes.startPos(canbus.servo1, canbus.net, soll_pos, max_rpm, max_acc, max_dec, rel_abs)
                        elif nodeID == 2:
                            res["success"], res["errorMsg"] = nodes.startPos(canbus.servo2, canbus.net, soll_pos, max_rpm, max_acc, max_dec, rel_abs)

                    elif 'setInterface' in self.path :
                        pairs = self.path.split('&')
                        device = pairs[1].split('=')[1]
                        bus = pairs[2].split('=')[1]
                        nodez = pairs[3].split('=')[1]
                        nodez = int(nodez.split('+')[0])
                        mot1 = pairs[4].split('=')[1]
                        mot2 = pairs[5].split('=')[1]
                        using_mot1 = pairs[6].split('=')[1]
                        using_mot2 = pairs[7].split('=')[1]

                        canbus.initialize(device, bus,nodez,nodez+1,nodez+2)
                        canbus.heartbeat(0.1)

                        res["success"], res["errorMsg"] = nodes.PDO_Init(canbus.servo1)
                        res["success"], res["errorMsg"] = nodes.PDO_Init(canbus.servo2)
                        res["success"], res["errorMsg"] = nodes.Elrest_Init(canbus.elrest3)
            
                        res["success"], res["errorMsg"] = nodes.init_301(canbus.elrest3)
                        res["success"], res["errorMsg"] = nodes.powerON(canbus.elrest3)

                        canbus.servo1_active = False
                        canbus.servo2_active = False

                        if using_mot1 == 'true' :
                            res["success"], res["errorMsg"] = nodes.init_402(canbus.servo1)
                            res["success"], res["errorMsg"] = nodes.motordaten(canbus.servo1, mot1)
                            canbus.servo1_active = True
                        if using_mot2 == 'true' :
                            res["success"], res["errorMsg"] = nodes.init_402(canbus.servo2)
                            res["success"], res["errorMsg"] = nodes.motordaten(canbus.servo2, mot2)
                            canbus.servo2_active = True


                    elif 'parameterBitte' in self.path :                
                        jj = json.dumps([canbus.servo1.motorParameter, canbus.servo2.motorParameter])
                        print(jj)
                        self.wfile.write(jj.encode(encoding='utf_8'))
                        return

                    elif 'par_senden' in self.path:
                        pairs = self.path.split('&')
                        motor = int(pairs[1].split('=')[1])
                
                        pairs = pairs[2:]
                        for p in pairs:
                            key = p.split('=')[0]
                            val = p.split('=')[1]
                            
                            if motor == 1:
                                canbus.servo1.motorParameter[key] = float(val)
                            elif motor == 2:
                                canbus.servo2.motorParameter[key] = float(val)

                        if motor == 1:
                            res["success"], res["errorMsg"] = nodes.motParUpdate(canbus.servo1)
                        elif motor == 2:
                            res["success"], res["errorMsg"] = nodes.motParUpdate(canbus.servo2)
                            
                except :
                    res["success"] = -1
                    res["errorMsg"] = str(sys.exc_info()[1])
                            
                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                self.wfile.write(json.dumps(res).encode(encoding='utf_8'))


        httpd = HTTPServer(('', 80), SimpleHTTPRequestHandler)
        httpd.serve_forever()

    except KeyboardInterrupt:
        httpd.shutdown()