import can
import time
import cantools

import sys, os
pathname = os.path.dirname(sys.argv[0])   

from tkinter import *
from functools import partial

import six

bus = can.ThreadSafeBus(bustype='vector', app_name='CANalyzer', channel=0, bitrate=500000)


class DSpaceSim():
    def __init__(self):
        self.root = Tk()
        self.display_text = StringVar()

        self.container = Frame(self.root, highlightbackground="orange", highlightthickness=1)
        self.canvas = Canvas(self.container, width=800, height=400)
        self.scrollbar = Scrollbar(self.container, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(
                scrollregion=self.canvas.bbox("all")
            )
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")

        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.db = cantools.database.load_file(pathname + '/dbcs/ADrive.dbc')

        for i, message in enumerate(self.db.messages):
            Label(self.scrollable_frame, text='0x%x' % message.frame_id).grid(row=i, column=0, sticky=NW)
            Label(self.scrollable_frame, text=message.name).grid(row=i, column=1, sticky=NW)

            
            sig_frame = Frame(self.scrollable_frame, highlightbackground="black", highlightthickness=1, padx=5, pady=5)
            sig_frame.grid(row=i, column=2)
            
            e_list = []
            for signal in message.signals:
                Label(sig_frame, text=signal.name).pack(anchor=E)
                e = Entry(sig_frame)
                e.insert(END, 0)
                e.pack()
                e_list.append(e)

            bSend = Button( self.scrollable_frame,
                            text='Send',
                            fg='red',
                            command=partial(self.sendMsg, message, e_list, self.db) )
            bSend.grid(row=i, column=3, sticky=NW)

            bSend = Button( self.scrollable_frame,
                            text='Read',
                            fg='green',
                            command=partial(self.sendMsg, message, e_list, self.db) )
            bSend.grid(row=i, column=4, sticky=NW)

        self.container.pack()
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")


        self.bottomframe = Frame(self.root, padx=20, pady=20 , highlightbackground="red", highlightthickness=1)
        self.bottomframe.pack(side=BOTTOM, fill=X)

        self.monitor = Label(self.bottomframe, text="CAN RX")
        self.monitor.pack(anchor=W)
        self.monitor = Label(self.bottomframe, text="...", textvariable=self.display_text)
        self.monitor.pack(anchor=W)

        self.monitor.after(20, self.readMsg)

        self.root.mainloop()


    def sendMsg(self, msg, e_list, db):
        signal_dict = {}
        for i, e in enumerate(e_list):
            signal_dict[msg.signals[i].name] = float(e.get())

        out = db.get_message_by_name(msg.name)
        payload = out.encode(signal_dict)

        msg = can.Message(  arbitration_id=out.frame_id,
                            data=payload,
                            is_extended_id=True)
        try:
            bus.send(msg)
            print("Message sent on {}".format(bus.channel_info))
            print(msg)
            time.sleep(0.1)
        except can.CanError:
            print("Message NOT sent")


    def readMsg(self):
        incoming = bus.recv(1)
        if incoming:
            o = ""
            o += str(hex(incoming.arbitration_id))
            o += str(list(six.iterbytes(incoming.data)))
            self.display_text.set(o)

        self.monitor.after(20, self.readMsg)


_ = DSpaceSim()



