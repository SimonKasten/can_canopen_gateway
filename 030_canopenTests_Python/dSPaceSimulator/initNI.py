import six
import nixnet
from nixnet import constants
from nixnet import types


class NIXnet():
    def __init__(self, bus, baud):
        self.reader = nixnet.FrameInStreamSession(bus)
        self.writer = nixnet.FrameOutStreamSession(bus)

        self.reader.intf.can_term = constants.CanTerm.ON
        self.writer.intf.can_term = constants.CanTerm.ON

        self.reader.intf.baud_rate = baud
        self.writer.intf.baud_rate = baud

        self.reader.start()
        self.writer.start()

    def readFrame(self):
        frames = self.reader.frames.read( self.reader.num_pend )
        for frame in frames:
            return frame
            # print('Received frame with ID: {} payload: {}'.format(frame.identifier,
            #                                                          list(six.iterbytes(frame.payload))))
    

    def writeFrame(self, id, payload_list):   
        frame_id = types.CanIdentifier(id, extended=True)
        payload = bytearray(payload_list)
        frame = types.CanFrame( frame_id, 
                                constants.FrameType.CAN_DATA,
                                payload )

        for index, byte in enumerate(payload):
            payload[index] = byte

        frame.payload = payload
    
        self.writer.frames.write([frame])
        print('Sent frame with ID: {} payload: {}'.format(frame.identifier,
                                                            list(frame.payload)))



    # interface1 = 'CAN1'
    # interface2 = 'CAN2'
    # input_session = nixnet.FrameInStreamSession(interface1)
    # output_session = nixnet.FrameOutStreamSession(interface2)
    # input_session.intf.can_term = constants.CanTerm.ON
    # output_session.intf.can_term = constants.CanTerm.ON
    # input_session.intf.baud_rate = 500000
    # output_session.intf.baud_rate = 500000
    # input_session.start()


