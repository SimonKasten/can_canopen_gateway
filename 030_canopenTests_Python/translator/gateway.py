import time
import threading
import hardware 
import nodes
from can import Message
import cantools
import sys, os
pathname = os.path.dirname(sys.argv[0])    

# BOOLEAN = 0x1
# INTEGER8 = 0x2
# INTEGER16 = 0x3
# INTEGER32 = 0x4
# UNSIGNED8 = 0x5
# UNSIGNED16 = 0x6
# UNSIGNED32 = 0x7
# REAL32 = 0x8
# VISIBLE_STRING = 0x9
# OCTET_STRING = 0xA
# UNICODE_STRING = 0xB
# DOMAIN = 0xF
# REAL64 = 0x11
# INTEGER64 = 0x15
# UNSIGNED64 = 0x1B

class Gateway:  
    def __init__(self):     
        self.dbc = cantools.database.load_file(pathname + '/dbcs/ADrive.dbc')
        self.bus = hardware.Hardware()
        self.bus.canopen.sync.start(0.005)


    def startGateway(self):
        self._WATCHDOG_FLAG = threading.Event()

        self.forcedStop = threading.Timer(0.5, self.emcy_stop)
        self.forcedStop.start()
        time.sleep(0.1)
        self.t = threading.Timer(0.5, self.set_watchdog_flag)
        self.t.start()

    def emcy_stop(self):
        try:
            if self._WATCHDOG_FLAG.is_set() :
                print("emcy_stop")
                nodes.stopOP(self.bus.servo1)
                nodes.stopOP(self.bus.servo2)

            self.forcedStop = threading.Timer(0.5, self.emcy_stop)
            self.forcedStop.start()
        except:
            print("ERROR:", sys.exc_info()[1])


    def set_watchdog_flag(self):
        self._WATCHDOG_FLAG.set()

    def reset_watchdog_timer(self):
        self.t.cancel()
        self.t = threading.Timer(0.5, self.set_watchdog_flag)
        self.t.start()

    def processCAN(self):  
        try:
            # Requests von dSpace mit CAN 
            request = self.bus.reader.get_message(timeout=0)

            if request:
                self.translate(request) 
        except:
            print("ERROR:", sys.exc_info()[1])

    def translate(self, in_msg):
        try:
            payload = self.dbc.decode_message(in_msg.arbitration_id, in_msg.data)
        except:
            print("Decode failed > ", in_msg)

            if in_msg.arbitration_id == 0 :
                print("Reset Vector CanCASE")
                self.bus.stop_notifier()
                time.sleep(0.5)
                self.bus.can.flush_tx_buffer()
                self.bus.can.reset()
                time.sleep(0.5)
                self.bus.start_notifier()
            return


        try:
            res = {
                "cob": 0,
                "sub": 0,
                "action": "",
                "val": 0.0,
                "success": 0,
                "errorMsg": ""
            }

            ID = in_msg.arbitration_id
            if ID == 0x1111111 : 
                self._WATCHDOG_FLAG.clear()
                self.reset_watchdog_timer()
                return

            if self._WATCHDOG_FLAG.is_set() :        
                print("Watchdog not present ... ")
                nodes.stopOP(self.bus.servo1)
                nodes.stopOP(self.bus.servo2)
                return                    

            if ID > 0x1000 and ID <= 0x2000 :
                if ID == 0x1001 :        
                    res["success"], res["errorMsg"] = nodes.PDO_Init(self.bus.servo1)          
                    res["success"], res["errorMsg"] = nodes.init_402(self.bus.servo1)
                    res["success"], res["errorMsg"] = nodes.motordaten(self.bus.servo1)

                elif ID == 0x1002 :    
                    res["success"], res["errorMsg"] = nodes.PDO_Init(self.bus.servo2)
                    res["success"], res["errorMsg"] = nodes.init_402(self.bus.servo2)
                    res["success"], res["errorMsg"] = nodes.motordaten(self.bus.servo2)

                elif ID == 0x1003 :
                    res["success"], res["errorMsg"] = nodes.init_301(self.bus.elrest3)
                    res["success"], res["errorMsg"] = nodes.Elrest_Init(self.bus.elrest3)
                    res["success"], res["errorMsg"] = nodes.powerON(self.bus.elrest3)

                elif ID == 0x1501 :
                    print("MODE_ID1")
                elif ID == 0x1502 :
                    print("MODE_ID2")

                print("ID:", hex(ID), "Success:", res["success"], res["errorMsg"])
                return

            elif ID > 0x2000 and ID <= 0x5000 :
                if ID > 0x2100 and ID <= 0x2500 :  # sollWerte Vorgabe
                    nodeID = ID & 0xF
                    if nodeID == 1:
                        servo = self.bus.servo1
                    elif nodeID == 2:
                        servo = self.bus.servo2
                    
                    for key, value in payload.items() :
                        if key in servo.sollWerte:
                            servo.sollWerte[key] = value
                            res["success"] = 1
                    nodes.sollToRPDO(servo)
                    
                elif ID == 0x2001 :
                    if payload["op_mode"] == 3 :
                        res["success"], res["errorMsg"] = nodes.startDreh(self.bus.servo1)
                    if payload["op_mode"] == 4 :
                        res["success"], res["errorMsg"] = nodes.startTorq(self.bus.servo1)
                    if payload["op_mode"] == 1 :
                        res["success"], res["errorMsg"] = nodes.startPos(self.bus.servo1, self.bus.canopen, payload["relative_absolut"])

                elif ID == 0x2002 :
                    if payload["op_mode"] == 3 :
                        res["success"], res["errorMsg"] = nodes.startDreh(self.bus.servo2)
                    if payload["op_mode"] == 4 :
                        res["success"], res["errorMsg"] = nodes.startTorq(self.bus.servo2)
                    if payload["op_mode"] == 1 :
                        res["success"], res["errorMsg"] = nodes.startPos(self.bus.servo2, self.bus.canopen, payload["relative_absolut"])


                elif ID == 0x4001 :
                    res["success"], res["errorMsg"] = nodes.stopOP(self.bus.servo1)
                elif ID == 0x4002 :
                    res["success"], res["errorMsg"] = nodes.stopOP(self.bus.servo2)


                self.encode_msg('AKZEPTIERT', {'success': res["success"]})
                #print("ID:", hex(ID), "Success:", res["success"], res["errorMsg"])
                return

            elif ID > 0x8000 and ID <= 0xA000 :
                if ID > 0x8010 and ID <= 0x9000 :  # sollWerte Vorgabe
                    nodeID = ID & 0xF
                    if nodeID == 1:
                        servo = self.bus.servo1
                    elif nodeID == 2:
                        servo = self.bus.servo2
                    
                    for key, value in payload.items() :
                        if key in servo.motorParameter:
                            servo.motorParameter[key] = value
                            res["success"] = 1

                elif ID == 0x8001 :
                    res["success"], res["errorMsg"] = nodes.motordaten(self.bus.servo1)
                elif ID == 0x8002 :
                    res["success"], res["errorMsg"] = nodes.motordaten(self.bus.servo2)
                elif ID == 0x9001 :
                    res["success"], res["errorMsg"] = nodes.motParUpdate(self.bus.servo1)
                elif ID == 0x9002 :
                    res["success"], res["errorMsg"] = nodes.motParUpdate(self.bus.servo2)

                print("ID:", hex(ID), "Success:", res["success"], res["errorMsg"])
                return

            elif ID == 0x10601: # SDO
                # so isses gedacht: 
                # data[0]   : 0=read, 1=write
                # data[1:2] : cob index
                # data[3]   : sub index
                # data[4:7] : wert bei "write"
                
                sdo_rw   = payload['sdo_rw']
                sdo_cob  = payload['sdo_cob']
                sdo_sub  = payload['sdo_sub']
                sdo_wert = payload['sdo_wert']

                antwort = 0.0

                try:
                    if sdo_rw == 0 :
                        if sdo_sub == 0 :
                            antwort = self.bus.servo1.sdo[sdo_cob].raw
                        else :
                            antwort = self.bus.servo1.sdo[sdo_cob][sdo_sub].raw
                    else :
                        if sdo_sub == 0 :
                            self.bus.servo1.sdo[sdo_cob].raw = sdo_wert
                        else :
                            self.bus.servo1.sdo[sdo_cob][sdo_sub].raw = sdo_wert
                except:
                    antwort = -1.0
            
                self.encode_msg('SDO_ANTWORT', {'sdo_rw': sdo_rw,
                                                'sdo_cob': sdo_cob,
                                                'sdo_sub': sdo_sub,
                                                'sdo_antwort': float(antwort)  })
                return

            else :
                print(hex(ID), "canopen ID range wrong ?")
            
            return
        except:
            print("ERROR:", sys.exc_info()[1])





    def get_status(self):
        try:
            drive_info = nodes.monitor(self.bus.servo1)
            self.encode_msg('STATUS_1_ID1', {'S_drehzahl':    drive_info["ist_rpm"], 
                                             'S_position':    drive_info["ist_pos"]   })
            self.encode_msg('STATUS_2_ID1', {'S_ist_strom':   drive_info["ist_curr"], 
                                             'S_limit_torque':  drive_info["MAX_I"]   })
            self.encode_msg('STATUS_3_ID1', {'S_ist_torque':  drive_info["ist_torq"], 
                                             'S_soll_torque': drive_info["soll_torq"]})
            self.encode_msg('STATUS_4_ID1', {'S_motor_temp':    -1   })
            
            self.encode_msg('TPDO1_1', {    'opmode':   drive_info["opmode"], 
                                            'ist_torq':   drive_info["ist_torq"], 
                                            'rdy_switch_on':        drive_info["statusword"] & 1, 
                                            'switched_on':          drive_info["statusword"] >> 1 & 1, 
                                            'op_enable':            drive_info["statusword"] >> 2 & 1, 
                                            'fault':                drive_info["statusword"] >> 3 & 1,  
                                            'voltage_en':           drive_info["statusword"] >> 4 & 1,  
                                            'quick_stop':           drive_info["statusword"] >> 5 & 1,  
                                            'switch_on_disabled':   drive_info["statusword"] >> 6 & 1,  
                                            'warning':              drive_info["statusword"] >> 7 & 1,  
                                            'man':                  drive_info["statusword"] >> 8 & 1,  
                                            'remote':               drive_info["statusword"] >> 9 & 1,  
                                            'target_reached':       drive_info["statusword"] >> 10 & 1,  
                                            'internal_limit_active':drive_info["statusword"] >> 11 & 1,  
                                            'mode_specific':        drive_info["statusword"] >> 12 & 3,  
                                            'man2':                 drive_info["statusword"] >> 14 & 3 })


            drive_info2 = nodes.monitor(self.bus.servo2)
            self.encode_msg('STATUS_1_ID2', {'S_drehzahl':    drive_info2["ist_rpm"], 
                                             'S_position':    drive_info2["ist_pos"]   })
            self.encode_msg('STATUS_2_ID2', {'S_ist_strom':   drive_info2["ist_curr"], 
                                             'S_limit_torque':drive_info2["MAX_I"]     })
            self.encode_msg('STATUS_3_ID2', {'S_ist_torque':  drive_info2["ist_torq"], 
                                             'S_soll_torque': drive_info2["soll_torq"]})
            self.encode_msg('STATUS_4_ID2', {'S_motor_temp':    -1   })

            self.encode_msg('TPDO1_2', {    'opmode':   drive_info2["opmode"], 
                                            'ist_torq':   drive_info2["ist_torq"], 
                                            'rdy_switch_on':        drive_info2["statusword"] & 1, 
                                            'switched_on':          drive_info2["statusword"] >> 1 & 1, 
                                            'op_enable':            drive_info2["statusword"] >> 2 & 1, 
                                            'fault':                drive_info2["statusword"] >> 3 & 1,  
                                            'voltage_en':           drive_info2["statusword"] >> 4 & 1,  
                                            'quick_stop':           drive_info2["statusword"] >> 5 & 1,  
                                            'switch_on_disabled':   drive_info2["statusword"] >> 6 & 1,  
                                            'warning':              drive_info2["statusword"] >> 7 & 1,  
                                            'man':                  drive_info2["statusword"] >> 8 & 1,  
                                            'remote':               drive_info2["statusword"] >> 9 & 1,  
                                            'target_reached':       drive_info2["statusword"] >> 10 & 1,  
                                            'internal_limit_active':drive_info2["statusword"] >> 11 & 1,  
                                            'mode_specific':        drive_info2["statusword"] >> 12 & 3,  
                                            'man2':                 drive_info2["statusword"] >> 14 & 3 })

        except:
            pass
            #print("ERROR:", sys.exc_info()[1])

            

    def encode_msg(self, dbc_msgName, encode_dict):
        try:
            statusmsg = self.dbc.get_message_by_name(dbc_msgName)
            statusmsg.payload = statusmsg.encode(encode_dict)
            self._dbc_send(statusmsg)
        except:
            print("ERROR:", sys.exc_info()[1])



    def _dbc_send(self, dbc_msg):
        try:
            msg = Message(arbitration_id=dbc_msg.frame_id,
                                data=dbc_msg.payload,
                                is_extended_id=dbc_msg.is_extended_frame)
            self.bus.can.send(msg)
        except:
            print("ERROR:", sys.exc_info()[1])






