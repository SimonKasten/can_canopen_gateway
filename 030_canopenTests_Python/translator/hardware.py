from can import ThreadSafeBus, BufferedReader, Notifier
from canopen import Network, BaseNode402, RemoteNode

import sys, os
pathname = os.path.dirname(sys.argv[0])        

# for pyinstaller
import can.interfaces.pcan
import can.interfaces.vector

class Hardware:
    def __init__(self):
        self.canopen = Network()

        self.servo1 = BaseNode402(1, pathname + '/EDS/CDHD_drive.eds')
        self.servo2 = BaseNode402(2, pathname + '/EDS/CDHD_drive.eds')
        self.elrest3 = RemoteNode(3, pathname + '/EDS/CS1xx_V1_5.eds')

        self.servo1.motorParameter = {
            "name"    : "M1",
            "M_cur_P_gain"      : 1,          # Current P-Gain [0-100]
            "M_cur_I_gain"      : 1,          # Current I-Gain [0-100]
            "M_vel_P_gain"      : 3,          # Velocity Proportional (KP) 
            "M_vel_I_gain"      : 60,         # Velocity I-Gain [Hz]
            "M_pos_P_gain"      : 1,          # Position Controller P-Gain [0-1200]
            "M_pos_I_gain"      : 60,         # Position Controller I-Gain [0-1000]
            "M_pos_D_gain"      : 0.1,        # Position Controller D-Gain [0-1000]
            "M_pos_saturation"  : 1,          # Position Integral Output Saturation [pos]
            "M_L"               : 3.5,        # Motor Inductance [MHz] , REAL32 *2 ? 
            "M_R"               : 0.91,       # Motor Resistance [Ohm] , REAL32 *2 ? 
            "M_peak_I"          : 6900,       # Motor Peak Current [mA] , UINT32
            "M_rated_I"         : 4700,       # Motor Rated Current [mA], UINT32
            "M_max_I"           : 1000,       # Maximum Current [MICONT], Rated Current / 1000
                                    # =>  Rated Current / 1000 * [0x6073]; also bei 1000 ist MAX_CURR = Motor Rated Current
            "M_rated_torque"    : 3800,       # Motor Rated Torque [mNm], UINT32
            "M_torque_slope"    : 10000,      # Torque Slope [mNm/s], UINT32
            "M_max_speed"       : 6000,       # Max Motor Speed [rpm], UINT32 
            "M_max_profile_speed"    : 6000,       # Max Profile Velocity [user]
            "M_max_acc"         : 5000,       # Max Acceleration [user]  
            "M_max_dec"         : 5000,       # Max Deceleration [user]
            "M_max_profile_acc" : 3000,       # Profile Acceleration [user]
            "M_max_profile_dec" : 3000        # Profile Deceleration [user]
        }    
        self.servo2.motorParameter = {
            "name"              : "M2",
            "M_cur_P_gain"      : 1,          # Current P-Gain [0-100]
            "M_cur_I_gain"      : 1,          # Current I-Gain [0-100]
            "M_vel_P_gain"      : 3,          # Velocity Proportional (KP) 
            "M_vel_I_gain"      : 60,         # Velocity I-Gain [Hz]
            "M_pos_P_gain"      : 1,          # Position Controller P-Gain [0-1200]
            "M_pos_I_gain"      : 60,         # Position Controller I-Gain [0-1000]
            "M_pos_D_gain"      : 0.1,        # Position Controller D-Gain [0-1000]
            "M_pos_saturation"  : 1,      # Position Integral Output Saturation [pos]
            "M_L"               : 2.0,        # Motor Inductance [MHz] , REAL32 *2 ? 
            "M_R"               : 0.48,       # Motor Resistance [Ohm] , REAL32 *2 ? 
            "M_peak_I"          : 17000,      # Motor Peak Current [mA] , UINT32
            "M_rated_I"         : 5600,       # Motor Rated Current [mA], UINT32
            "M_max_I"           : 1000,       # Maximum Current [MICONT], Rated Current / 1000
                                    # =>  Rated Current / 1000 * [0x6073]; also bei 1000 ist MAX_CURR = Motor Rated Current
            "M_rated_torque"    : 14000,      # Motor Rated Torque [mNm], UINT32
            "M_torque_slope"    : 10000,      # Torque Slope [mNm/s], UINT32
            "M_max_speed"       : 6000,       # Max Motor Speed [rpm], UINT32 
            "M_max_profile_speed"    : 6000,       # Max Profile Velocity [user]
            "M_max_acc"         : 5000,       # Max Acceleration [user]  
            "M_max_dec"         : 5000,       # Max Deceleration [user]
            "M_max_profile_acc" : 3000,       # Profile Acceleration [user]
            "M_max_profile_dec" : 3000        # Profile Deceleration [user]
        }    
        self.servo1.sollWerte = {
            'D_soll_rpm'  : 0,
            'D_max_torq'  : 0,
            'T_soll_torq' : 0,
            'T_max_rpm'   : 0,
            'P_soll_pos'  : 0,
            'P_soll_rpm'  : 0,
            'P_max_acc'   : 0,
            'P_max_dec'   : 0,
        }
        self.servo2.sollWerte = {
            'D_soll_rpm'  : 0,
            'D_max_torq'  : 0,
            'T_soll_torq' : 0,
            'T_max_rpm'   : 0,
            'P_soll_pos'  : 0,
            'P_soll_rpm'  : 0,
            'P_max_acc'   : 0,
            'P_max_dec'   : 0,
        }
        
        #self.canopen.connect(bustype='pcan', channel='PCAN_USBBUS0', bitrate=500000)
        self.canopen.connect(bustype='vector', app_name='CANalyzer', channel=1, bitrate=500000)
        
        # Add some nodes with corresponding Object Dictionaries
        self.canopen.add_node(self.servo1)
        self.canopen.add_node(self.servo2)
        self.canopen.add_node(self.elrest3)

        #c = ThreadSafeBus(bustype='pcan', channel='PCAN_USBBUS1', bitrate=500000)
        self.can = ThreadSafeBus(bustype='vector', app_name='CANalyzer', channel=0, bitrate=500000)

    def start_notifier(self):        
        self.reader = BufferedReader()
        self.notifier = Notifier(self.can, [self.reader], 0.1)

    def stop_notifier(self):
        self.reader.stop()
        self.notifier.stop()

