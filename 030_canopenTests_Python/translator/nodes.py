import time
import sys

CONST_SCALE_NUM = 262144.0                      # = PNUM
CONST_SCALE_VELO = (CONST_SCALE_NUM / 60.0)


def micontToTorque(micont, node):
    _torque = micont / 1000000 * 0.63 * node.motorParameter["M_rated_I"]
    return _torque

def torqueToMicont(torque, node):
    _micont = torque * 1000000 / 0.63 / node.motorParameter["M_rated_I"]
    return _micont


def init_402(node):
    try:
        node.setup_402_state_machine()
        return True, "OK"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])
        
def init_301(node):
    try:
        node.load_configuration()
        node.nmt.state = 'OPERATIONAL'
        return True, "OK"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])



def powerON(node):
    try:       
        relais = node.sdo[0x6000][2].raw

        timeout = time.time() + 1
        while relais != 0x05:     
            relais = node.sdo[0x6000][2].raw
            
            node.rpdo['Write Output 8 Bit.Write Output 08 .. 15'].raw = 0x05
            node.rpdo[1].transmit()

            if time.time() > timeout:
                raise Exception('powerON() timeout') 
        
        return True, "OK"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


def PDO_Init(node):
    try:
        node.sdo[0x1005].raw = 0x80  #= 0x80000080  #1005h – COB-ID SYNC Message
        node.sdo[0x1007].raw = 0x2710  #= 0x00002710  #1007h – Synchronous Window Length
        node.sdo[0x1014].raw = 0x80 + node.id  #= 0x80000081  #1014h – COB-ID EMCY
        #1400h – Receive PDO Communication Parameter 1
        node.sdo[0x1400][1].raw = 0x200 + node.id  
        node.sdo[0x1401][1].raw = 0x300 + node.id
        node.sdo[0x1402][1].raw = 0x400 + node.id
        node.sdo[0x1403][1].raw = 0x500 + node.id
        #1600h – Receive PDO Mapping Parameter 1
        # TODO 06040041 error cannt set PDO
        # node.sdo[0x1600].raw = 2
        # node.sdo[0x1601].raw = 2
        # node.sdo[0x1602].raw = 2
        # node.sdo[0x1603].raw = 2
        #1800h – Transmit PDO Communication Parameter 1
        node.sdo[0x1800][1].raw = 0x180 + node.id
        node.sdo[0x1801][1].raw = 0x280 + node.id
        node.sdo[0x1802][1].raw = 0x380 + node.id
        node.sdo[0x1803][1].raw = 0x480 + node.id 
        #1A00h – Transmit PDO Mapping Parameter 1
        # TODO 06040041 error cannt set PDO
        # node.sdo[0x1A00].phys = 3
        # node.sdo[0x1A01].phys = 2
        # node.sdo[0x1A02].phys = 4
        # node.sdo[0x1A03].phys = 2
        return 1, "OK"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])

        
def Elrest_Init(node):
    try:
        node.sdo[0x1005].raw = 0x80000080
        node.sdo[0x1014].raw = 0x80 + node.id

        node.sdo[0x1400][1].raw = 0x200 + node.id
        node.sdo[0x1400][2].raw = 0x1  
        node.sdo[0x1401][1].raw = 0x300 + node.id  
        node.sdo[0x1401][2].raw = 0x1  
        node.sdo[0x1402][1].raw = 0x400 + node.id # nicht verwendet daher kein 0x1
        node.sdo[0x1403][1].raw = 0x500 + node.id  

        node.sdo[0x1600].raw = 0x4  
        node.sdo[0x1601].raw = 0x4  

        node.sdo[0x1800][1].raw = 0x180 + node.id  
        node.sdo[0x1800][2].raw = 0x1  
        node.sdo[0x1801][1].raw = 0x280 + node.id  
        node.sdo[0x1801][2].raw = 0x1  
        node.sdo[0x1802][1].raw = 0x380 + node.id
        node.sdo[0x1803][1].raw = 0x480 + node.id  

        node.sdo[0x1A00].raw = 0x4  
        node.sdo[0x1A01].raw = 0x4  

        node.sdo[0x5010][1].raw = 0x00000005
        node.sdo[0x5010][2].raw = 0x00000005
        node.sdo[0x5010][3].raw = 0x00000005
        node.sdo[0x5010][4].raw = 0x00000005
        node.sdo[0x5011][1].raw = 0x00000033
        node.sdo[0x5011][2].raw = 0x00000033
        node.sdo[0x5011][3].raw = 0x00000033
        node.sdo[0x5011][4].raw = 0x00000033
        node.sdo[0x5012][1].raw = 0x00000FA0
        node.sdo[0x5012][2].raw = 0x00000FA0
        node.sdo[0x5012][3].raw = 0x00000FA0
        node.sdo[0x5012][4].raw = 0x00000FA0
        node.sdo[0x5013][1].raw = 0x00000FA0
        node.sdo[0x5013][2].raw = 0x00000FA0
        node.sdo[0x5013][3].raw = 0x00000FA0
        node.sdo[0x5013][4].raw = 0x00000FA0
        node.sdo[0x6423].raw = 0x00000001        
        return 1, "OK"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


# id_node groß oder klein
def motordaten(node): 
    try:
        print("Config PAR -> Servo ID:" , node, node.id)     
        node.sdo[0x2007].raw = node.motorParameter["M_cur_P_gain"]     # Current P-Gain [0-100]
        node.sdo[0x2006].raw = node.motorParameter["M_cur_I_gain"]     # Current I-Gain [0-100]

        node.sdo[0x2027].raw = node.motorParameter["M_vel_P_gain"]     # Velocity Proportional (KP) 
        node.sdo[0x2026].raw = node.motorParameter["M_vel_I_gain"]     # Velocity I-Gain [Hz]

        node.sdo[0x2022].raw = node.motorParameter["M_pos_P_gain"]     # Position Controller P-Gain [0-1200]
        node.sdo[0x2020].raw = node.motorParameter["M_pos_I_gain"]     # Position Controller I-Gain [0-1000]
        node.sdo[0x201E].raw = node.motorParameter["M_pos_D_gain"]     # Position Controller D-Gain [0-1000]
        node.sdo[0x2021].raw = node.motorParameter["M_pos_saturation"]     # Position Integral Output Saturation [pos]

        node.sdo[0x203A].raw = node.motorParameter["M_L"]     # Motor Inductance [MHz] , REAL32 *2 ? 
        node.sdo[0x207F].raw = node.motorParameter["M_R"]     # Motor Resistance [Ohm] , REAL32 *2 ? 

        node.sdo[0x2036].raw = node.motorParameter["M_peak_I"]     # Motor Peak Current [mA] , UINT32
        node.sdo[0x6075].raw = node.motorParameter["M_rated_I"]     # Motor Rated Current [mA], UINT32
        node.sdo[0x6073].raw = node.motorParameter["M_max_I"]     # Maximum Current [MICONT], Rated Current / 1000
                                    #   =>  Rated Current / 1000 * [0x6073]; also bei 1000 ist MAX_CURR = Motor Rated Current
        node.sdo[0x6076].raw = node.motorParameter["M_rated_torque"]     # Motor Rated Torque [mNm], UINT32
        node.sdo[0x6087].raw = node.motorParameter["M_torque_slope"]     # Torque Slope [mNm/s], UINT32

        # node.sdo[0x2030].raw = 0        # Foldback Disable , bool
        # node.sdo[0x2031].raw = 70       # Foldback Recovery Time [s] , REAL32
        # node.sdo[0x2032].raw = 5        # Foldback Time Constant [s] , REAL32
        # node.sdo[0x202F].raw = 5        # Foldback Delay Time [s] , REAL32
        # 60B0h – Position Offset
        # 60B1h – Velocity Offset
        # 60B2h – Torque Offset
        # 2039h – Motor Torque Constant [Nm/A]
        # 2116h – Position Motion Ended
            # -1 =   Movement was interrupted (e.g., due to Disable)
            # 0 = Not completed
            # 1 = Profile completed
            # 2 = Profile completed and drive is in position (INPOS)

        node.sdo[0x6080].raw = node.motorParameter["M_max_speed"]  * CONST_SCALE_VELO    # Max Motor Speed [rpm], UINT32 
        node.sdo[0x607F].raw = node.motorParameter["M_max_profile_speed"]  * CONST_SCALE_VELO    # Max Profile Velocity [user]

        node.sdo[0x60C5].raw = node.motorParameter["M_max_acc"]  * CONST_SCALE_VELO  # Max Acceleration [user]  
        node.sdo[0x60C6].raw = node.motorParameter["M_max_dec"]  * CONST_SCALE_VELO  # Max Deceleration [user]
        node.sdo[0x6083].raw = node.motorParameter["M_max_profile_acc"]  * CONST_SCALE_VELO  # Profile Acceleration [user]
        node.sdo[0x6084].raw = node.motorParameter["M_max_profile_dec"]  * CONST_SCALE_VELO  # Profile Deceleration [user]

        print("     ===> parameter gesendet")

        node.sdo[0x2002].raw = 1  # Konfigurationssequenz
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])



def motParUpdate(node):
    try:
        print("Update PAR -> Servo ID:" , node.id)
        node.sdo[0x2007].raw = node.motorParameter["M_cur_P_gain"]    # Current P-Gain [0-100]
        node.sdo[0x2006].raw = node.motorParameter["M_cur_I_gain"]    # Current I-Gain [0-100]

        node.sdo[0x2027].raw = node.motorParameter["M_vel_P_gain"]    # Velocity Proportional (KP) 
        node.sdo[0x2026].raw = node.motorParameter["M_vel_I_gain"]    # Velocity I-Gain [Hz]

        node.sdo[0x2022].raw = node.motorParameter["M_pos_P_gain"]    # Position Controller P-Gain [0-1200]
        node.sdo[0x2020].raw = node.motorParameter["M_pos_I_gain"]    # Position Controller I-Gain [0-1000]
        node.sdo[0x201E].raw = node.motorParameter["M_pos_D_gain"]    # Position Controller D-Gain [0-1000]
        node.sdo[0x2021].raw = node.motorParameter["M_pos_saturation"]    # Position Integral Output Saturation [pos]

        node.sdo[0x203A].raw = node.motorParameter["M_L"]    # Motor Inductance [MHz] , REAL32 *2 ? 
        node.sdo[0x207F].raw = node.motorParameter["M_R"]    # Motor Resistance [Ohm] , REAL32 *2 ? 

        node.sdo[0x2036].raw = node.motorParameter["M_peak_I"]    # Motor Peak Current [mA] , UINT32
        node.sdo[0x6075].raw = node.motorParameter["M_rated_I"]    # Motor Rated Current [mA], UINT32
        node.sdo[0x6073].raw = node.motorParameter["M_max_I"]    # Maximum Current [MICONT], Rated Current / 1000
                                                        #   =>  Rated Current / 1000 * [0x6073]; also bei 1000 ist MAX_CURR = Motor Rated Current
        node.sdo[0x6076].raw = node.motorParameter["M_rated_torque"]    # Motor Rated Torque [mNm], UINT32
        node.sdo[0x6087].raw = node.motorParameter["M_torque_slope"]    # Torque Slope [mNm/s], UINT32
        node.sdo[0x6080].raw = node.motorParameter["M_max_speed"]  * CONST_SCALE_VELO  # Max Motor Speed [rpm], UINT32 
        node.sdo[0x607F].raw = node.motorParameter["M_max_profile_speed"]  * CONST_SCALE_VELO  # Max Profile Velocity [user]

        node.sdo[0x60C5].raw = node.motorParameter["M_max_acc"]  * CONST_SCALE_VELO  # Max Acceleration [user]  
        node.sdo[0x60C6].raw = node.motorParameter["M_max_dec"]  * CONST_SCALE_VELO  # Max Deceleration [user]
        node.sdo[0x6083].raw = node.motorParameter["M_max_profile_acc"]  * CONST_SCALE_VELO  # Profile Acceleration [user]
        node.sdo[0x6084].raw = node.motorParameter["M_max_profile_dec"]  * CONST_SCALE_VELO  # Profile Deceleration [user]

        print("     ===> parameter geupdated")
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])




def changeModeTimout(node, _mode, timeout):
    node.rpdo[1]['Modes of Operation'].raw = _mode
    node.rpdo[1].transmit()  
    gesetzt = node.tpdo[1]['Modes of Operation Display'].raw

    t = time.time() + timeout
    while gesetzt != _mode :
        if time.time() > t:
            raise Exception(f'Timeout when trying to change to {_mode} mode')
        node.rpdo[1]['Modes of Operation'].raw = _mode
        node.rpdo[1].transmit()  
        gesetzt = node.tpdo[1]['Modes of Operation Display'].raw
        time.sleep(0.01)



def sollToRPDO(node):
    try:
        node.rpdo[3]['Target Velocity'].phys = node.sollWerte['D_soll_rpm'] * CONST_SCALE_VELO
        node.rpdo[3].transmit()     

        node.rpdo[4]['Target Torque'].phys = torqueToMicont(node.sollWerte['T_soll_torq'], node)
        node.rpdo[4].transmit()               

        node.rpdo[2]['Target Position'].phys = node.sollWerte['P_soll_pos'] * CONST_SCALE_NUM
        node.rpdo[2]['Profile Velocity in profile position mode'].phys = node.sollWerte['P_soll_rpm'] * CONST_SCALE_VELO
        node.rpdo[2].transmit()           

        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])

def startDreh(node):
    try:        
        stopOP(node)  
        node.motorParameter["M_max_I"] = torqueToMicont(node.sollWerte['D_max_torq'], node)

        node.sdo[0x6073].raw = node.motorParameter["M_max_I"]    # MICONT
        node.sdo[0x607F].raw = node.motorParameter["M_max_profile_speed"] * CONST_SCALE_VELO
        node.sdo[0x6083].raw = node.motorParameter["M_max_profile_acc"]  * CONST_SCALE_VELO  # Profile Acceleration [user]
        node.sdo[0x6084].raw = node.motorParameter["M_max_profile_dec"]  * CONST_SCALE_VELO  # Profile Deceleration [user]

        changeModeTimout(node, 3, timeout=0.25)

        startOP(node)

        node.rpdo[3]['Target Velocity'].phys = node.sollWerte['D_soll_rpm'] * CONST_SCALE_VELO
        node.rpdo[3].transmit()     
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


def startTorq(node):
    try:
        stopOP(node)
        node.sdo[0x6083].raw = node.motorParameter["M_max_profile_acc"]  * CONST_SCALE_VELO  # Profile Acceleration [user]
        node.sdo[0x6084].raw = node.motorParameter["M_max_profile_dec"]  * CONST_SCALE_VELO  # Profile Deceleration [user]
        node.sdo[0x607F].raw = node.sollWerte['T_max_rpm'] * CONST_SCALE_VELO    # Max Profile Velocity [user]
                
        changeModeTimout(node, 4, timeout=0.25)
        startOP(node)
        
        node.rpdo[4]['Target Torque'].phys = torqueToMicont(node.sollWerte['T_soll_torq'], node)
        node.rpdo[4].transmit()             
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


def startPos(node, cbus, rel_abs):
    try:
        stopOP(node)
        node.sdo[0x607F].raw = node.motorParameter["M_max_profile_speed"] * CONST_SCALE_VELO
        node.sdo[0x6083].raw = node.sollWerte["P_max_acc"]  * CONST_SCALE_VELO  # Profile Acceleration [user]
        node.sdo[0x6084].raw = node.sollWerte["P_max_dec"]  * CONST_SCALE_VELO  # Profile Deceleration [user]
        
        changeModeTimout(node, 1, timeout=0.25)
        startOP(node)

        node.rpdo[2]['Target Position'].phys = node.sollWerte['P_soll_pos'] * CONST_SCALE_NUM
        node.rpdo[2]['Profile Velocity in profile position mode'].phys = node.sollWerte['P_soll_rpm'] * CONST_SCALE_VELO
        node.rpdo[2].transmit()           

        if rel_abs > 0 :
            cbus.send_message(0x200 + node.id, [0x3F  , 0x00 , 0x01])
            cbus.send_message(0x200 + node.id, [0x3F  , 0x00 , 0x01])        
                   
        else :
            cbus.send_message(0x200 + node.id, [0x7F  , 0x00 , 0x01])
            cbus.send_message(0x200 + node.id, [0x7F  , 0x00 , 0x01])        
   
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


def monitor(node):
    drive_info = {
        "statusword"   : 0,
        "opmode"   : 0,
        "ist_torq" : 0,
        "ist_rpm"  : 0,
        "ist_pos"  : 0,
        "ist_curr" : 0,
        "soll_torq": 0,
        "analog1"  : 0,
        "analog2"  : 0,
        "dig_in"   : 0,
        "pos_ext"  : 0,
        "MAX_I"  : 0,
        "MOTOR_TEMP"  : 0,
        "recv"   : 0
    }    

    try:
        faktor = node.motorParameter["M_rated_I"] / 1000000.0

        drive_info["MAX_I"] = round(micontToTorque(node.motorParameter["M_max_I"], node), 2) 
        drive_info["statusword"] = node.tpdo[1]['Statusword'].phys       
        drive_info["opmode"]     = node.tpdo[1]['Modes of Operation Display'].raw
        drive_info["ist_torq"]   = round(micontToTorque(node.tpdo[1]['Torque Actual Value'].phys, node), 2) 
        drive_info["ist_rpm"]    = round(node.tpdo[2]['Velocity Actual Value'].phys / CONST_SCALE_VELO, 0)
        drive_info["ist_pos"]    = round(node.tpdo[2]['Position Actual Value'].phys / CONST_SCALE_NUM, 2)
        drive_info["ist_curr"]   = round(node.tpdo[3]['Current Actual Value'].phys * faktor, 2)
        drive_info["soll_torq"]  = round(micontToTorque(node.tpdo[3]['Torque Demand Value'].phys, node), 2) 
        drive_info["analog1"]    = node.tpdo[3]['Analog Input 1'].phys
        drive_info["analog2"]    = node.tpdo[3]['Analog Input 2'].phys
        drive_info["dig_in"]     = node.tpdo[4]['Digital Inputs'].phys
        drive_info["pos_ext"]    = node.tpdo[4]['Machine Hardware Position External'].phys
        
        drive_info["recv"] = node.id
    except:
        print("ERROR:", sys.exc_info()[1])
    return drive_info


def change_state_timeout(node, _state, timeout):
    try:
        t = time.time() + timeout
        node.state = _state
        while node.state != _state:
            if time.time() > t:
                raise Exception(f'Timeout when trying to change to {_state} state')
            time.sleep(0.01)
        return 1, "Akzeptiert"
    except:
        print("ERROR:", sys.exc_info()[1])
        return None, str(sys.exc_info()[1])


def startOP(node) :
    return change_state_timeout(node, 'OPERATION ENABLED', 0.1)

def stopOP(node) :
    return change_state_timeout(node, 'SWITCH ON DISABLED', 0.1)

def clearFault(node) :
    return change_state_timeout(node, 'SWITCH ON DISABLED', 0.1)

def disableNode(node) :
    return change_state_timeout(node, 'DISABLED', 0.1)

# TPDO1
# n  Statusword (6041h), 16 bits
# n  Modes of Operation Display (6061h)
# n  Torque Actual value (6077h), 16 bits
# TPDO2
# n  Position actual value (6064h), 32 bits
# n  Velocity actual value (606Ch), 32 bits
# TPDO3
# n  Current actual value (6078h), 16 bits
# n  Torque demand command (6074h), 16 bits
# n  Analog input 1 (20F2h), 16 bits
# n  Analog input 2 (20F9h), 16 bits
# TPDO4
# n  Digital inputs (60FDh), 32 bits
# n  Position external command (20b6h), 32 bits
# RPDO1
# n  Control word (6040h), 16 bits
# n  Mode of operation (6060h), 8 bits
# RPDO2
# n  Target position (607Ah), 32 bits
# n  Profile velocity (6081h), 32 bits
# RPDO3
# n  Target velocity (60FFh), 32 bits
# RPDO4
# n  Target torque (6071h), 16 bit
